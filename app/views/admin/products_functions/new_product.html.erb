<nav class="navbar navbar-inverse sidebar" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-sidebar-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">Organic Hustler</a>
    </div>
    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-sidebar-navbar-collapse-1">
      <ul class="nav navbar-nav">
        <li>
          <a href="/admin/home">Home<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-home"></span></a>
        </li>
        <li class="active">
          <a href="/admin/products">Products<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-product-hunt"></span></a>
        </li>
        <li>
          <a href="/admin/logos">Logos<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-picture-o"></span></a>
        </li>
        <li>
          <a href="/admin/orders">Orders<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-truck"></span></a>
        </li>
      </ul>
    </div>
  </div>
</nav>
<body style="background-color: #dedede">
<div class="main">

  <!--Display tags as bootstrap pills -->
  <%= javascript_include_tag 'bootstrap-tagsinput' %>
  <%= stylesheet_link_tag 'bootstrap-tagsinput' %>

  <div class="head-bread-crumbs card">
    <h4><a class="breadcrumb" href="/admin/products">Products</a> / New</h4>
  </div>

  <div class="card modal-c">
    <button onclick="save()">Save</button>
    <table>
      <thead>
      <tr class="heading_table">
        <th></th>
        <th>Name</th>
        <th>SKU</th>
        <th>Status</th>
        <th>Category</th>
        <th>Brand</th>
        <th>Price</th>
        <th>Tax band</th>
        <th>Stock lever</th>
        <th>Stock status</th>
        <th>Needs Shipping</th>
        <th>Catalog Only</th>
        <th>Description</th>
        <th>Slug</th>
        <th>Images</th>
      </tr>
      </thead>
      <tbody id="tt_body">
      <tr id="mm_row" class="product_row_new">
        <td>
          <button onclick="delete_row(this)">Remove</button>
        </td>
        <td>
          <input class="form-control" type="text" value="" id="title_edit" name="title">
        </td>
        <td>
          <input class="form-control" type="text" value="" id="sku_edit" name="sku">
        </td>
        <td>
          <select id="status_edit" name="status_edit">
            <option value="0">Draft</option>
            <option value="1">Live</option>
          </select>
        </td>
        <td>
          <select id="category_edit" name="category_edit">
            <% AdminHelper.get_categories.each do |category| %>
                <option value="<%= category['id'] %>"><%= category['title'] %></option>
            <% end %>
          </select>
        </td>
        <td>
          <select id="brand_edit" name="brand_edit">
            <% AdminHelper.get_brands.each do |brand| %>
                <option value="<%= brand['id'] %>"><%= brand['title'] %></option>
            <% end %>
          </select>
        </td>
        <td>
          <input class="form-control" type="number" step="any" value="" id="price_edit" name="price">
        </td>
        <td>
          <select id="tax_edit" name="tax_edit">
            <% AdminHelper.get_taxes.each do |tax| %>
                <option value="<%= tax['id'] %>"><%= tax['title'] %></option>
            <% end %>
          </select>
        </td>
        <td>
          <input class="form-control" type="number" name="stock_level" value="" id="stock_level_edit">
        </td>
        <td>
          <select id="stock_status_edit" name="stock_status_edit">
            <option value="0">Unlimited</option>
            <option value="1">Unlimited</option>
            <option value="2">Unlimited</option>
            <option value="3">Unlimited</option>
            <option value="4">Unlimited</option>
            <option value="5">Unlimited</option>
            <option value="6">Unlimited</option>
            <option value="7">Unlimited</option>
            <option value="8">Unlimited</option>
            <option value="9">Unlimited</option>
          </select>
        </td>
        <td>
          <select id="requires_shipping_edit" name="requires_shipping_edit">
            <option value="0">YES</option>
            <option value="1">NO</option>
          </select>
        </td>
        <td>
          <select id="catalog_only_edit" name="catalog_only_edit">
            <option value="0">YES</option>
            <option value="1">NO</option>
          </select>
        </td>
        <td>
          <textarea rows="1" class="form-control" name="description" id="description_edit"></textarea>
        </td>
        <td>
          <input class="form-control" style="width: 100%" id="tags_edit" name="tags" type="text" value="">
        </td>
        <td>
          <input type="file" name="img" id="img_edit" multiple>
        </td>
      </tr>
      <tr id="replace_with">
        <td>
          <button onclick="add_row()">Add row</button>
        </td>
      </tr>
      </tbody>
    </table>
  </div>

</div>
</body>
<link href="https://wzrd.in/standalone/blob-util@latest" rel="script">
<script>

    var mm_row = document.getElementById('mm_row').outerHTML + document.getElementById('replace_with').outerHTML;
    function add_row() {
        document.getElementById('replace_with').outerHTML = mm_row;
    }

    function delete_row(element_row) {
        var row = element_row.parentNode.parentNode;
        var overall_parent = row.parentNode;
        overall_parent.removeChild(row);
    }

    function save() {
        var rows = [];
        $("tr.product_row_new").each(function () {
            rows.push($(this))
        });
        var limit_n = rows.length;
        var current_n = 0;
        var current = 0;

        request(rows[0]);

        function request(row) {
            $.ajax({
                url: "/product/new/product",
                type: "POST",
                data: {
                    title: row.find('#title_edit').val(),
                    sku: row.find('#sku_edit').val(),
                    status: row.find('select[name="status_edit"]').val(),
                    category: row.find('select[name="category_edit"]').val(),
                    brand: row.find('select[name="brand_edit"]').val(),
                    price: row.find('#price_edit').val(),
                    tax_band: row.find('select[name="tax_edit"]').val(),
                    sale_price: row.find('#price_edit').val(),
                    stock_level: row.find('#stock_level_edit').val(),
                    stock_status: row.find('select[name="stock_status_edit"]').val(),
                    description: row.find('#description_edit').val(),
                    slug: row.find('#tags_edit').val(),
                    requires_shipping: row.find('select[name="requires_shipping_edit"]').val(),
                    catalog_only: row.find('select[name="catalog_only_edit"]').val()
                },
                dataType: "json",
                success: function (data) {
                    console.log(data);
                    upload(row, data)
                },
                error: function (data) {
                    console.log(data)
                }
            });
        }

        function upload(row, data) {
            var files = row.find('#img_edit')[0].files;
            current = 0;

            function send(i) {
                var reader = new FileReader();
                reader.onloadend = function (e) {
                    var blob = new Blob([this.result], {type: "image/jpeg"});
                    console.log(blob);
                    sendRecToPost(blob, '/product/upload_image?imageO=true&id='.concat(data['id']), files.length);
                };
                reader.readAsArrayBuffer(files[i]);
            }

            send(current);

            function sendRecToPost(blob, url, limit) {

                var data = new FormData();
                data.append("file", blob);

                var oReq = new XMLHttpRequest();
                oReq.open("put", url);
                oReq.send(data);

                oReq.onload = function (oEvent) {
                    if (oReq.status === 200) {
                        console.log("Uploaded");
                        current = current + 1;
                        if (current === limit && current_n < (limit_n - 1)) {
                            current_n = current_n + 1;
                            request(rows[current_n]);
                        } else if (current < limit) {
                            send(current);
                        } else if (current_n === (limit_n - 1)) {
                            window.location.href = '/admin/products'
                        }
                    } else {
                        console.log("Error " + oReq.status + " occurred uploading your file.");
                    }
                };
            }

        }
    }

</script>