<nav class="navbar navbar-inverse sidebar" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-sidebar-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">Organic Hustler</a>
    </div>
    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-sidebar-navbar-collapse-1">
      <ul class="nav navbar-nav">
        <li>
          <a href="/admin/home">Home<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-home"></span></a>
        </li>
        <li class="active">
          <a href="/admin/products">Products<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-product-hunt"></span></a>
        </li>
        <li>
          <a href="/admin/logos">Logos<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-picture-o"></span></a>
        </li>
        <li>
          <a href="/admin/orders">Orders<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-truck"></span></a>
        </li>
      </ul>
    </div>
  </div>
</nav>
<body style="background-color: #dedede">

<script>
    var image_emblem = null;
</script>

<div class="center-div">
  <div class="card notification-ask" style="background: #ffffff">
    <h3>Add Emblem</h3>
    <hr>
    <div style="text-align: left">
          <div style="margin: 10px">
            <div id="emblems-drop" class="container-menu-emblem dropzone">
              <% base_image = get_product(@product_id)['images'][0]['url']['https'] %>
              <% Emblem.where(id_moltin: @product_id).each do |logo| %>
                  <div class="items-emblems-container" style="float: left; overflow: hidden; margin: 4px;">
                    <img onclick="image_emblem = ['<%= logo['id'] %>', '<%= logo.picture.url %>']" src="<%= logo.picture.url(:thumb) %>" alt="" height="30px">
                  </div>
              <% end %>
            </div>

            <!--<div class="input-group">
              <span class="input-group-addon">Price emblem</span>
              <label for="emblem_cost"></label><input class="form-control" aria-label="Amount (to the nearest dollar)" type="number" step="any" min="0" id="emblem_cost" value="">
              <span class="input-group-addon">$</span>
            </div>-->

            <input class="hidden" type="text" id="rel_x" value="400" name="rel_x">
            <input class="hidden" type="text" id="rel_y" value="400" name="rel_y">

            <input class="hidden" type="text" id="id_moltin" value="<%= @product_id %>" name="id_moltin">

            <div id="positions"></div>
            <button id="button_new_position" type="button" onclick="if(image_emblem !== null){add_position()}" style="width: 100%; margin-top: 10px" class="btn btn-primary">ADD
              POSITION
            </button>

            <script>

                var positions = [];
                var rev_positions = [];

                function add_position(position_id, x, y, rel_x, rel_y, cost, width, height, emblem_id) {

                    var position = {
                        position_id: position_id || -1,
                        element_id: 'pos_' + positions.length,
                        container_id: 'container_' + positions.length,
                        x: x || 100,
                        y: y || 100,
                        rel_x: rel_x || 400,
                        rel_y: rel_y || 400,
                        cost: cost || 0,
                        width: width || 100,
                        height: height || 100,
                        emblem_id: emblem_id || image_emblem[0]
                    };

                    document.getElementById('positions').insertAdjacentHTML('beforeend', '<div id="' + position.element_id + '" style="position: relative">'
                        + '<h4>' + 'pos_' + positions.length + '</h4>'
                        + '<button type="button" onclick="remove_position(\'' + positions.length + '\')" style="position: absolute; top: 10px; right: 10px; z-index: 4" class="btn"><i class="fa fa-trash" aria-hidden="true"></i></button>'
                        + '<div id="' + position.container_id + '" style="width: 400px; height: 400px; z-index: 2;">'
                        + '</div>'
                        + '<div class="input-group">'
                        + '<label for="emblem_cost"></label><input class="form-control" aria-label="Amount (to the nearest dollar)" type="number" step="any" min="0" id="emblem_cost" value="">'
                        + '<span class="input-group-addon">$</span>'
                        + '</div>'
                        + '</div>');

                    var stage = new Konva.Stage({
                        container: position.container_id,
                        width: 400,
                        height: 400
                    });

                    var layer = new Konva.Layer();
                    stage.add(layer);

                    var baseImg = new Konva.Image({
                        width: 400,
                        height: 400,
                        draggable: false
                    });

                    var logoImg = new Konva.Image({
                        width: 100,
                        height: 100
                    });

                    var logoGroup = new Konva.Group({
                        x: 100,
                        y: 100,
                        draggable: true
                    });

                    layer.add(baseImg);
                    layer.add(logoGroup);
                    logoGroup.add(logoImg);

                    var anchor_1 = addAnchor(logoGroup, 0, 0, 'topLeft');
                    var anchor_2 = addAnchor(logoGroup, 100, 0, 'topRight');
                    var anchor_3 = addAnchor(logoGroup, 100, 100, 'bottomRight');
                    var anchor_4 = addAnchor(logoGroup, 0, 100, 'bottomLeft');

                    logoGroup.on('dragend', function () {
                        position.x = logoGroup.x();
                        position.y = logoGroup.y();
                        console.log(position);
                    });

                    anchor_1.on('dragend', function () {
                        position.x = logoGroup.x();
                        position.y = logoGroup.y();

                        position.width = anchor_2.getX() - anchor_1.getX();
                        position.height = anchor_4.getY() - anchor_1.getY();
                        console.log(position);
                    });

                    anchor_2.on('dragend', function () {
                        position.x = logoGroup.x();
                        position.y = logoGroup.y();

                        position.width = anchor_2.getX() - anchor_1.getX();
                        position.height = anchor_4.getY() - anchor_1.getY();
                        console.log(position);
                    });

                    anchor_3.on('dragend', function () {
                        position.x = logoGroup.x();
                        position.y = logoGroup.y();

                        position.width = anchor_2.getX() - anchor_1.getX();
                        position.height = anchor_4.getY() - anchor_1.getY();
                        console.log(position);
                    });

                    anchor_4.on('dragend', function () {
                        position.x = logoGroup.x();
                        position.y = logoGroup.y();

                        position.width = anchor_2.getX() - anchor_1.getX();
                        position.height = anchor_4.getY() - anchor_1.getY();
                        console.log(position);
                    });

                    var imageObj = new Image();
                    imageObj.onload = function () {
                        baseImg.image(imageObj);
                        layer.draw();
                    };
                    imageObj.src = '<%= base_image %>';

                    var logo = new Image();
                    logo.onload = function () {
                        logoImg.image(logo);
                        layer.draw();
                    };
                    logo.src = image_emblem[1];

                    positions.push(position);
                }

                function remove_position(id_sp) {
                    var element = document.getElementById(positions[id_sp].element_id);
                    element.parentNode.removeChild(element);
                    rev_positions.push(positions[id_sp]);
                }

              function addAnchor(group, x, y, name) {
                  var layer = group.getLayer();
                  var anchor = new Konva.Circle({
                      x: x,
                      y: y,
                      stroke: '#666',
                      fill: '#ddd',
                      strokeWidth: 2,
                      radius: 8,
                      name: name,
                      draggable: true,
                      dragOnTop: false
                  });
                  anchor.on('dragmove', function () {
                      update(this);
                      layer.draw();
                  });
                  anchor.on('mousedown touchstart', function () {
                      group.setDraggable(false);
                      this.moveToTop();
                  });
                  anchor.on('dragend', function () {
                      group.setDraggable(true);
                      layer.draw();
                  });
                  // add hover styling
                  anchor.on('mouseover', function () {
                      var layer = this.getLayer();
                      document.body.style.cursor = 'pointer';
                      this.setStrokeWidth(4);
                      layer.draw();
                  });
                  anchor.on('mouseout', function () {
                      var layer = this.getLayer();
                      document.body.style.cursor = 'default';
                      this.setStrokeWidth(2);
                      layer.draw();
                  });
                  group.add(anchor);
                  return anchor;
              }

              function update(activeAnchor) {
                  var group = activeAnchor.getParent();
                  var topLeft = group.get('.topLeft')[0];
                  var topRight = group.get('.topRight')[0];
                  var bottomRight = group.get('.bottomRight')[0];
                  var bottomLeft = group.get('.bottomLeft')[0];
                  var image = group.get('Image')[0];
                  var anchorX = activeAnchor.getX();
                  var anchorY = activeAnchor.getY();
                  // update anchor positions
                  switch (activeAnchor.getName()) {
                      case 'topLeft':
                          topRight.setY(anchorY);
                          bottomLeft.setX(anchorX);
                          break;
                      case 'topRight':
                          topLeft.setY(anchorY);
                          bottomRight.setX(anchorX);
                          break;
                      case 'bottomRight':
                          bottomLeft.setY(anchorY);
                          topRight.setX(anchorX);
                          break;
                      case 'bottomLeft':
                          bottomRight.setY(anchorY);
                          topLeft.setX(anchorX);
                          break;
                  }
                  image.position(topLeft.position());
                  var width = topRight.getX() - topLeft.getX();
                  var height = bottomLeft.getY() - topLeft.getY();
                  if (width && height) {
                      image.width(width);
                      image.height(height);
                  }
              }


            </script>

          </div>

      <button id="button_submit" type="button" onclick="modify_positions()" style="width: 100%; margin-top: 10px" class="btn btn-primary">UPDATE</button>

      <script>

          function modify_positions() {

              for (var pos in positions) {
                  try {
                      positions[pos].cost = document.getElementById(positions[pos].element_id).getElementsByTagName('input')[0].value;
                  } catch (e) {
                      console.log(e)
                  }
              }
              for (var pos_r in rev_positions) {
                  try {
                      rev_positions[pos_r].cost = document.getElementById(rev_positions[pos_r].element_id).getElementsByTagName('input')[0].value;
                  } catch (e) {
                      console.log(e)
                  }
              }

              $.ajax({
                  url: '/support_controllers/add/emblems_position',
                  method: 'put',
                  dataType: 'json',
                  data: {
                      positions_add: positions,
                      positions_rev: rev_positions
                  },
                  success: function (data) {

                  },
                  error: function (data) {

                  }
              });
          }

      </script>

      <script>
          new Dropzone("div#emblems-drop", { // The camelized version of the ID of the form element

                  // The configuration we've talked about above
                  url: '/support_controllers/add/emblems',
              autoProcessQueue: true,
                  uploadMultiple: true,
                  parallelUploads: 1,
              maxFiles: 100,
                  headers: {
                      'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                  },
              method: 'put',
              remote: true,

                  // The setting up of the dropzone
                  init: function () {
                      var myDropzone = this;

                      // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                      // of the sending event because uploadMultiple is set to true.
                      this.on("sending", function (file, xhr, formData) {
                          formData.append("id_moltin", '<%= @product_id %>');
                      });
                      this.on("success", function (files, response) {
                          console.log(response);
                          image_emblem = [response['id'], response['url']];
                      });
                  }
              });
          </script>


    </div>
  </div>

</div>
</body>