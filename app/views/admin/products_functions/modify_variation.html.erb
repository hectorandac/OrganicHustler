<script>
    const items = [];
</script>
<nav class="navbar navbar-inverse sidebar" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-sidebar-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">Organic Hustler</a>
    </div>
    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-sidebar-navbar-collapse-1">
      <ul class="nav navbar-nav">
        <li>
          <a href="/admin/home">Home<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-home"></span></a>
        </li>
        <li class="active">
          <a href="/admin/products">Products<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-product-hunt"></span></a>
        </li>
        <li>
          <a href="/admin/logos">Logos<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-picture-o"></span></a>
        </li>
        <li>
          <a href="/admin/orders">Orders<span style="font-size:16px;" class="pull-right hidden-xs show opacity fa fa-truck"></span></a>
        </li>
      </ul>
    </div>
  </div>
</nav>
<body style="background-color: #dedede">
<div class="main">

  <div class="head-bread-crumbs card">
    <h4><a class="breadcrumb" href="/admin/products">Products</a> /
      <a class="breadcrumb" href="/admin/product/edit/<%= @product %>"><%= @product %></a> / <%= @id %></h4>
  </div>

  <div class="table_products card modal-g">
    <table class="table" id="table">
      <thead>
      <tr>
        <th><input id="select-all" type="checkbox" name="select-all"></th>
        <th onclick="sort_title()" class="header-ele">Size</th>
        <th onclick="sort_title()" class="header-ele">Color</th>
        <th onclick="sort_title()" class="header-ele">Title</th>
        <th onclick="sort_category()" class="header-ele">Current price $</th>
        <th onclick="sort_inventory()" class="header-ele">Inventory</th>
        <th onclick="sort_price()" class="header-ele">Status</th>
      </tr>
      </thead>
      <tbody id="list-to-m">
      <% get_product_variations(@product).each do |product| %>

          <% variations = ['', '', ''] %>
          <% variant = false %>
          <% product['modifiers'].each do |modifiers| %>

              <% p modifiers %>

              <% if modifiers[1]['title'].eql?('Logo preset')
                   variations[0] = modifiers
                 elsif modifiers[1]['title'].eql?('Size')
                   variations[1] = modifiers
                 elsif (modifiers[1]['data'] || {:title => nil})['title'].eql?('Color')
                   variations[2] = modifiers
                 end
              %>

              <% p variations %>

              <% if modifiers[1]['var_id'].eql?(@id) %>
                  <% variant = true %>
              <% end %>
          <% end %>

          <% p variant %>

          <% if variant %>
              <tr id="product-row">
                <td>
                  <input id="select-obj" type="checkbox" name="select-obj" onclick="add_item(this, '<%= product['id'] %>')">
                </td>
                <td onclick="window.location.href = '/admin/product/edit/<%= product['id'] %>'"><%= variations[1][1]['var_title'] %></td>
                <td><%= variations[2][1]['var_title'] %></td>
                <td><%= product['title'] %></td>
                <td class="price" style="text-align: right"><%= product['price']['data']['raw']['with_tax'] %></td>
                <td><%= product['stock_level'] %></td>
                <td><%= product['status']['value'] %></td>
              </tr>
          <% end %>
      <% end %>

      </tbody>
    </table>
  </div>
  <div class="card modal-h">

    <button id="btn_w" onclick="loadLogoDrop()" class="btn btn-success menu-buttons" type="button">Add group images
    </button>

    <div id="logo-drop" class="container-menu hidden">
    </div>

  </div>

  <script id="logo_drop_load">

      function loadLogoDrop() {
          document.getElementById("logo-drop").className = 'container-menu dropzone';
          var myDropzone = new Dropzone("div#logo-drop", {
              url: 'upload_m_image',
              autoProcessQueue: true,
              uploadMultiple: false,
              parallelUploads: 100,
              maxFiles: 100,
              headers: {
                  'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
              },
              method: 'put',
              remote: true,

              // The setting up of the dropzone
              init: function () {
                  var myDropzone = this;

                  this.on("sending", function (file, xhr, formData) {
                      formData.append("products", items);
                  });
                  this.on("success", function (file, xhr) {
                      this.removeAllFiles();
                  });

                  // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                  // of the sending event because uploadMultiple is set to true.
                  this.on("sendingmultiple", function () {
                      // Gets triggered when the form is actually being sent.
                      // Hide the success button or the complete form.
                  });
                  this.on("successmultiple", function (files, response) {
                      // Gets triggered when the files have successfully been sent.
                      // Redirect user or notify of success.
                  });
                  this.on("errormultiple", function (files, response) {
                      // Gets triggered when there was an error sending the files.
                      // Maybe show form again, and notify user of error
                  });
              }
          });
      }

  </script>

  <script>

      function add_item(box, product) {
          if (box.checked && ($.inArray(product, items) === -1))
              items.push(product);
          else
              items.splice(items.lastIndexOf(product), 1);
          console.log(items);
      }

  </script>

  <script>

      var title_sort = true;
      var inventory_sort = true;
      var category_sort = true;
      var price_sort = true;

      function sort_title() {
          var table, rows, switching, i, x, y, shouldSwitch;
          table = document.getElementById("table");
          switching = true;
        /*Make a loop that will continue until
         no switching has been done:*/
          while (switching) {
              //start by saying: no switching is done:
              switching = false;
              rows = table.getElementsByTagName("tr");
            /*Loop through all table rows (except the
             first, which contains table headers):*/
              for (i = 1; i < (rows.length - 1); i++) {
                  //start by saying there should be no switching:
                  shouldSwitch = false;
                /*Get the two elements you want to compare,
                 one from current row and one from the next:*/
                  x = rows[i].getElementsByTagName("td")[2];
                  y = rows[i + 1].getElementsByTagName("td")[2];
                  //check if the two rows should switch place:
                  if ((x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) && title_sort) {
                      //if so, mark as a switch and break the loop:
                      shouldSwitch = true;
                      break;
                  } else if ((x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) && !title_sort) {
                      shouldSwitch = true;
                      break;
                  }
              }
              if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                 and mark that a switch has been done:*/
                  rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                  switching = true;
              }
          }

          title_sort = !title_sort;
      }
      function sort_inventory() {
          var table, rows, switching, i, x, y, shouldSwitch;
          table = document.getElementById("table");
          switching = true;
        /*Make a loop that will continue until
         no switching has been done:*/
          while (switching) {
              //start by saying: no switching is done:
              switching = false;
              rows = table.getElementsByTagName("tr");
            /*Loop through all table rows (except the
             first, which contains table headers):*/
              for (i = 1; i < (rows.length - 1); i++) {
                  //start by saying there should be no switching:
                  shouldSwitch = false;
                /*Get the two elements you want to compare,
                 one from current row and one from the next:*/
                  x = rows[i].getElementsByTagName("td")[3];
                  y = rows[i + 1].getElementsByTagName("td")[3];
                  //check if the two rows should switch place:
                  if ((parseFloat(x.innerHTML) > parseFloat(y.innerHTML)) && inventory_sort) {
                      //if so, mark as a switch and break the loop:
                      shouldSwitch = true;
                      break;
                  } else if ((parseFloat(x.innerHTML) < parseFloat(y.innerHTML)) && !inventory_sort) {
                      shouldSwitch = true;
                      break;
                  }
              }
              if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                 and mark that a switch has been done:*/
                  rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                  switching = true;
              }
          }

          inventory_sort = !inventory_sort;
      }
      function sort_category() {
          var table, rows, switching, i, x, y, shouldSwitch;
          table = document.getElementById("table");
          switching = true;
        /*Make a loop that will continue until
         no switching has been done:*/
          while (switching) {
              //start by saying: no switching is done:
              switching = false;
              rows = table.getElementsByTagName("tr");
            /*Loop through all table rows (except the
             first, which contains table headers):*/
              for (i = 1; i < (rows.length - 1); i++) {
                  //start by saying there should be no switching:
                  shouldSwitch = false;
                /*Get the two elements you want to compare,
                 one from current row and one from the next:*/
                  x = rows[i].getElementsByTagName("td")[2];
                  y = rows[i + 1].getElementsByTagName("td")[2];
                  //check if the two rows should switch place:
                  if ((x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) && category_sort) {
                      //if so, mark as a switch and break the loop:
                      shouldSwitch = true;
                      break;
                  } else if ((x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) && !category_sort) {
                      shouldSwitch = true;
                      break;
                  }
              }
              if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                 and mark that a switch has been done:*/
                  rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                  switching = true;
              }
          }

          category_sort = !category_sort;
      }
      function sort_price() {
          var table, rows, switching, i, x, y, shouldSwitch;
          table = document.getElementById("table");
          switching = true;
        /*Make a loop that will continue until
         no switching has been done:*/
          while (switching) {
              //start by saying: no switching is done:
              switching = false;
              rows = table.getElementsByTagName("tr");
            /*Loop through all table rows (except the
             first, which contains table headers):*/
              for (i = 1; i < (rows.length - 1); i++) {
                  //start by saying there should be no switching:
                  shouldSwitch = false;
                /*Get the two elements you want to compare,
                 one from current row and one from the next:*/
                  x = rows[i].getElementsByTagName("td")[3];
                  y = rows[i + 1].getElementsByTagName("td")[3];
                  //check if the two rows should switch place:
                  if ((parseFloat(x.innerHTML) > parseFloat(y.innerHTML)) && price_sort) {
                      //if so, mark as a switch and break the loop:
                      shouldSwitch = true;
                      break;
                  } else if ((parseFloat(x.innerHTML) < parseFloat(y.innerHTML)) && !price_sort) {
                      shouldSwitch = true;
                      break;
                  }
              }
              if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                 and mark that a switch has been done:*/
                  rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                  switching = true;
              }
          }

          price_sort = !price_sort;
      }

      $('*[class*=price]:visible').each(function () {
          var amount = $(this).html();
          var i = parseFloat(amount);
          if (isNaN(i)) {
              i = 0.00;
          }
          var minus = '';
          if (i < 0) {
              minus = '-';
          }
          i = Math.abs(i);
          i = parseInt((i + .005) * 100);
          i = i / 100;
          var s = String(i);
          if (s.indexOf('.') < 0) {
              s += '.00';
          }
          if (s.indexOf('.') === (s.length - 2)) {
              s += '0';
          }
          s = minus + s;
          $(this).html(s);
      });


  </script>

</div>
</body>