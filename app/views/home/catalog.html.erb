<div id="items-container" style="overflow: hidden; margin-bottom: 30px">

  <div style="z-index: 0;" id="filters">

    <hr class="desktopnot" style="float: left; width: 100%; margin: 0 auto">
    <!-- Large button group -->
    <div class="btn-group filter-element">
      <button id="button_for_drop" style="font-weight: bold" class="btn btn-default btn-enlarge btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Style
        <span style="right: 0; position: absolute; padding: 5px"><i class="fa fa-caret-down" aria-hidden="true"></i></span>
      </button>
      <ul id="style-list-filter" class="dropdown-menu drop-enlarge">
        <li style="padding-top: 7px; padding-bottom: 7px" onclick="filters.style = ''; load_items();" class="selectable">
          <h5>Clear selection</h5></li>
      </ul>
    </div>

    <hr class="desktopnot" style="float: left; width: 100%; margin: 0 auto">

    <!-- Large button group -->
    <div class="btn-group filter-element">
      <button style="font-weight: bold" class="btn btn-default btn-enlarge btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Colors
        <span style="right: 0; position: absolute; padding: 5px"><i class="fa fa-caret-down" aria-hidden="true"></i></span>
      </button>
      <ul id="color-list-filter" class="dropdown-menu drop-enlarge">
        <li style="padding-top: 7px; padding-bottom: 7px" onclick="filters.color = ''; load_items();" class="selectable">
          <h5>Clear selection</h5></li>
      </ul>
    </div>

    <hr class="desktopnot" style="float: left; width: 100%; margin: 0 auto">

    <!-- Large button group -->
    <div class="btn-group filter-element">
      <button style="font-weight: bold" class="btn btn-default btn-enlarge btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Material
        <span style="right: 0; position: absolute; padding: 5px"><i class="fa fa-caret-down" aria-hidden="true"></i></span>
      </button>
      <ul id="material-list-filter" class="dropdown-menu drop-enlarge">
        <li style="padding-top: 7px; padding-bottom: 7px" onclick="filters.material = ''; load_items();" class="selectable">
          <h5>Clear selection</h5></li>
      </ul>
    </div>

    <hr class="desktopnot" style="float: left; width: 100%; margin: 0 auto">

    <div class="filter-element mobilenot"><h5 id="product_counter" style="font-weight: bold">0 products found</h5></div>
  </div>

  <div id="items" style="min-height: 370px">

  </div>

</div>

<script>

    (function ($) {
        $.fn.removeStyle = function (style) {
            var search = new RegExp(style + '[^;]+;?', 'g');

            return this.each(function () {
                $(this).attr('style', function (i, style) {
                    return style && style.replace(search, '');
                });
            });
        };
    }(jQuery));

    var id_preset_temp = null;

    var first_style = document.getElementById('style-list-filter').cloneNode(true);
    var first_material = document.getElementById('material-list-filter').cloneNode(true);
    var first_color = document.getElementById('color-list-filter').cloneNode(true);

    var contains = function (needle) {
        // Per spec, the way to identify NaN is that it is not equal to itself
        var findNaN = needle !== needle;
        var indexOf;

        if (!findNaN && typeof Array.prototype.indexOf === 'function') {
            indexOf = Array.prototype.indexOf;
        } else {
            indexOf = function (needle) {
                var i = -1, index = -1;

                for (i = 0; i < this.length; i++) {
                    var item = this[i];

                    if ((findNaN && item !== item) || item === needle) {
                        index = i;
                        break;
                    }
                }

                return index;
            };
        }

        return indexOf.call(this, needle) > -1;
    };

    var filters = {
        style: '',
        color: '',
        material: ''
    };

    var filters_arr = {
        style: [],
        color: [],
        material: [],
        remove: function () {
            this.style = [];
            this.color = [];
            this.material = [];
        }
    };

    function add_filter(value, title, type) {
        switch (type) {
            case 0:
                if (!contains.call(filters_arr.style, value)) {
                    if (filters.style === value.toString()) {
                        $('#style-list-filter').append('<li style="padding-top: 7px; padding-bottom: 7px" onclick="filters.style = \'' + value + '\'; load_items();" class="selectable selected0f"><h5>' + title + '</h5></li>');
                    } else {
                        $('#style-list-filter').append('<li style="padding-top: 7px; padding-bottom: 7px" onclick="filters.style = \'' + value + '\'; load_items();" class="selectable"><h5>' + title + '</h5></li>');
                    }
                    filters_arr.style.push(value);
                }
                break;
            case 1:
                if (!contains.call(filters_arr.color, value)) {
                    if (filters.color === value.toString()) {
                        $('#color-list-filter').append('<li style="padding-top: 7px; padding-bottom: 7px" onclick="filters.color = \'' + value + '\'; load_items();" class="selectable selected0f"><h5>' + title + '</h5></li>');
                    } else {
                        $('#color-list-filter').append('<li style="padding-top: 7px; padding-bottom: 7px" onclick="filters.color = \'' + value + '\'; load_items();" class="selectable"><h5>' + title + '</h5></li>');
                    }
                    filters_arr.color.push(value);
                }
                break;
            case 2:
                if (!contains.call(filters_arr.material, value)) {
                    if (filters.material === value.toString()) {
                        $('#material-list-filter').append('<li style="padding-top: 7px; padding-bottom: 7px" onclick="filters.material = \'' + value + '\'; load_items();" class="selectable selected0f"><h5>' + title + '</h5></li>');
                    } else {
                        $('#material-list-filter').append('<li style="padding-top: 7px; padding-bottom: 7px" onclick="filters.material = \'' + value + '\'; load_items();" class="selectable"><h5>' + title + '</h5></li>');
                    }
                    filters_arr.material.push(value);
                }
                break;
        }
    }

    function load_items() {

        document.getElementById('style-list-filter').outerHTML = first_style.outerHTML;
        document.getElementById('material-list-filter').outerHTML = first_material.outerHTML;
        document.getElementById('color-list-filter').outerHTML = first_color.outerHTML;
        filters_arr.remove();

        $.ajax({
            url: '/catalog/items?category=' + '<%= @parameters['view'] %>&style=' + filters.style + '&color=' + filters.color + '&material=' + filters.material + '&search=<%= @parameters['search'] %>',
            type: 'GET',
            dataType: 'json',
            data: {},
            success: function (data) {
                console.log(data);
                var html_items = '';
                document.getElementById('product_counter').innerHTML = data.length + ' products found';
                for (var id in data) {
                    var item = data[id];
                    html_items = html_items + '<div class="catalog-item" id="item' + item.id + '" onclick="open_quick(\'' + item.id + '\', 1)">'
                        + '<img id="item_img_' + item.id + '" class="img-con-item" style="margin-bottom: 10px" src="' + item.product_image_id + '">'
                        + '<h5 class="text-uppercase text_light" style="font-size: 16px; margin-bottom: 10px">' + item.title + '</h5>'
                        + '<h5 style="font-size: 16px; color: #ba97a6; font-family: \'Source Sans Pro\', sans-serif; font-weight: 600">$' + parseFloat(Math.round(item.price * 100) / 100).toFixed(2) + '</h5>'
                        + '<button onclick="open_quick(\'' + item.id + '\', 1)" class="btn btn-sp btn-bottom_fixed" style="width: 100%">Quick Shop</button>'
                        + '</div>';
                    document.getElementById('items').innerHTML = html_items;

                    /*$.ajax({
                        url: '/catalog/product/main_image?pr_id=' + data[id].id,
                        type: 'GET',
                        dataType: 'json',
                        data: {},
                        success: function (data) {
                            console.log('item_img_' + data.id);
                            document.getElementById('item_img_' + data.id).src = data.src;
                        }
                    });*/

                    $.ajax({
                        url: '/catalog/product/colors?product_id=' + data[id].id,
                        type: 'GET',
                        dataType: 'json',
                        data: {},
                        success: function (data) {
                            for (var i = 0; i < data.length; i++) {
                                add_filter(data[i].title, data[i].title, 1);
                            }
                        }
                    });
                    $.ajax({
                        url: '/catalog/product/styles?id=' + data[id].id,
                        type: 'GET',
                        dataType: 'json',
                        data: {},
                        success: function (data) {
                            for (var i = 0; i < data.length; i++) {
                                add_filter(data[i].id, data[i].title, 0);
                            }
                        }
                    });
                    $.ajax({
                        url: '/catalog/product/materials?id=' + data[id].id,
                        type: 'GET',
                        dataType: 'json',
                        data: {},
                        success: function (data) {
                            for (var i = 0; i < data.length; i++) {
                                add_filter(data[i].id, data[i].title, 2);
                            }
                        }
                    });

                }
            },
            error: function (data) {
                console.log(data);
            }
        });
    }

    load_items();

</script>

<!-- The Modal -->
<div id="quick_view" class="modal_quick modal_base">

  <!-- Modal content -->
  <div id="modal-content-center" class="modal-content_quick modal-content_base" style="overflow: hidden; padding: 0;">
    <div id="general_p_content" class="g-wrapper" style="position: relative">
      <span id="actor" style="cursor: pointer; color: #ba97a6; z-index: 9000; position: absolute; left: 10px"><i class="fa fa-times" aria-hidden="true"></i></span>
      <div id="product_display" class="wrapper-side">
        <button id="slide-left" style="top: 0; bottom: 0; margin: auto; border: none; left: 0; float: left; position: absolute; width: 10%" href="#" class="jcarousel-control-prev">
          <i class="fa fa-chevron-left" aria-hidden="true"></i>
        </button>
        <div class="image-container-quick" id="image-container">
        </div>
        <button id="slide-right" style="top: 0; bottom: 0; margin: auto; border: none; right: 0; float: right; position: absolute; width: 10%" href="#" class="jcarousel-control-next">
          <i class="fa fa-chevron-right" aria-hidden="true"></i>
        </button>
      </div>
      <div id="layers" class="wrapper-side">

        <div style="display: none" id="view_1">
          <div class="wrap">
            <h5 id="product_title" class="text-uppercase text_light_20"></h5>
            <h5 id="product_price" class="text_light_pink"></h5>
            <div id="product_description" class="wrap light-paragraph" style="padding-top: 10px">
              <span id="first_30"></span><span id="dots">...</span><span class="complete"></span>
              <div style="text-align: end">
                <span id="more-toggle" class="text_light_pink">Read more</span>
              </div>
            </div>
            <hr style="margin-bottom: 0">
            <div style="margin-bottom: 10px">
              <div id="icon-show" class="hidden">
                <h5 class="text_light"><i class="fa fa-angle-down" aria-hidden="true"></i> SIZE</h5></div>
              <div id="icon-hide"><h5 class="text_light"><i class="fa fa-angle-up" aria-hidden="true"></i> SIZE</h5>
              </div>
            </div>

            <div style="height: 40px" id="icon_loader" class="jcarousel-wrapper">
              <button id="controller-jcarousel-preview-l" style="top: 0; border: none; left: 0; float: left; position: relative; width: 10%" href="#" class="jcarousel-control-prev" data-jcarouselcontrol="true">
                <i class="fa fa-chevron-left" aria-hidden="true"></i>
              </button>
              <div style="float: left; width: 80%" id="preview_size_cr_carousel" class="jcarousel" data-jcarousel="true">
                <ul id="container-sizes" style="left: 0; top: 0;">
                </ul>
              </div>
              <button id="controller-jcarousel-preview-r" style="top: 0; border: none; right: 0; float: right; position: relative; width: 10%" href="#" class="jcarousel-control-next" data-jcarouselcontrol="true">
                <i class="fa fa-chevron-right" aria-hidden="true"></i>
              </button>
            </div>

            <hr style="margin-bottom: 0">
            <div style="margin-bottom: 10px">
              <div id="icon-show-logo" class="hidden">
                <h5 class="text_light"><i class="fa fa-angle-down" aria-hidden="true"></i> CUSTOMIZED</h5></div>
              <div id="icon-hide-logo">
                <h5 class="text_light"><i class="fa fa-angle-up" aria-hidden="true"></i> CUSTOMIZED</h5></div>
            </div>

            <div style="height: 80px" id="icon_loader_logo" class="jcarousel-wrapper">
              <button id="controller-jcarousel-preview-l" style="top: 25px; border: none; left: 0; float: left; position: relative; width: 10%" href="#" class="jcarousel-control-prev" data-jcarouselcontrol="true">
                <i class="fa fa-chevron-left" aria-hidden="true"></i>
              </button>
              <div style="float: left; width: 80%" id="preview_preset_cr_carousel" class="jcarousel" data-jcarousel="true">
                <ul id="container-presets" style="left: 0; top: 0;">
                </ul>
              </div>
              <button id="controller-jcarousel-preview-r" style="top: 25px; border: none; right: 0; float: right; position: relative; width: 10%" href="#" class="jcarousel-control-next" data-jcarouselcontrol="true">
                <i class="fa fa-chevron-right" aria-hidden="true"></i>
              </button>
            </div>

            <div>
              <button style="width: 100%; margin-top: 10px" class="btn btn-cust" onclick="load_view_2(product.data)">CUSTOMIZE
                IT
              </button>
              <button style="width: 100%; margin-top: 10px" class="btn btn-sp" onclick="addToCart()">ADD TO CART
              </button>
            </div>
          </div>
        </div>

        <div style="display: none" id="view_2">
          <div class="wrap">
            <h6 style="font-weight: bold">Select color(s):</h6>
            <div id="checkboxes-color">
            </div>
            <div id="controllers" style="float: left; width: 100%">
              <div style="margin-left: auto; margin-right: auto; text-align: center">
                <button id="minus-btn" class="direction border-bg-sty resizable">
                  <div class="fa fa-minus"></div>
                </button>
                <button id="plus-btn" class="direction border-bg-sty resizable">
                  <div class="fa fa-plus"></div>
                </button>
                <button id="left-btn" class="direction border-bg-sty resizable">
                  <div class="fa fa-chevron-left"></div>
                </button>
                <button id="right-btn" class="direction border-bg-sty resizable">
                  <div class="fa fa-chevron-right"></div>
                </button>
                <button id="down-btn" class="direction border-bg-sty resizable">
                  <div class="fa fa-chevron-down"></div>
                </button>
                <button id="up-btn" class="direction border-bg-sty resizable">
                  <div class="fa fa-chevron-up"></div>
                </button>
              </div>
            </div>
            <div style="width: 100%; text-align: center">
              <button id="share" class="styling_btn btn">SHARE
              </button>
            </div>
            <hr class="pro">
            <div id="icon-show-logos" class="hidden">
              <h6><i class="fa fa-angle-down" aria-hidden="true"></i> CHOOSE DESIGN</h6></div>
            <div id="icon-hide-logos"><h6><i class="fa fa-angle-up" aria-hidden="true"></i> CHOOSE DESIGN</h6></div>

            <div id="icon_loader-logos" class="jcarousel-wrapper row">
              <button id="controller-jcarousel-preview-l" style="top: 25px; border: none; left: 0; float: left; position: relative; width: 10%" href="#" class="jcarousel-control-prev" data-jcarouselcontrol="true">
                <i class="fa fa-chevron-left" aria-hidden="true"></i>
              </button>
              <div style="float: left; width: 80%; height: 70px" id="preview_preset_cr_carousel" class="jcarousel" data-jcarousel="true">
                <ul id="container-logos" style="left: 0; top: 0;">
                </ul>
              </div>
              <button id="controller-jcarousel-preview-r" style="top: 25px; border: none; right: 0; float: right; position: relative; width: 10%" href="#" class="jcarousel-control-next" data-jcarouselcontrol="true">
                <i class="fa fa-chevron-right" aria-hidden="true"></i>
              </button>
            </div>

            <div id="selection-btn-s">
              <button onclick="start_over()" id="restart-btn" type="button" style="width: 100%; margin-top: 10px" class="btn btn-default">
                <span class="cell-btn">START OVER</span></button>
              <button type="button" style="width: 100%; margin-top: 10px" class="btn btn-sp cell-btn" onclick="send_variations()">
                DONE
              </button>
            </div>

          </div>
        </div>

        <div style="display: none" id="view_3">
          <div class="wrap">
            <div id="icon_loader" class="jcarousel-wrapper">
              <button id="controller-jcarousel-preview-l" style="top: 45px; border: none; left: 0; float: left; position: relative; width: 10%" href="#" class="jcarousel-control-prev" data-jcarouselcontrol="true">
                <i class="fa fa-chevron-left" aria-hidden="true"></i>
              </button>
              <div style="float: left; width: 80%; height: 150px;" id="preview_preset_cr_carousel" class="jcarousel" data-jcarousel="true">
                <ul id="container-emblems" style="left: 0; top: 0;">
                </ul>
              </div>
              <button id="controller-jcarousel-preview-r" style="top: 45px; border: none; right: 0; float: right; position: relative; width: 10%" href="#" class="jcarousel-control-next" data-jcarouselcontrol="true">
                <i class="fa fa-chevron-right" aria-hidden="true"></i>
              </button>
            </div>

            <div id="selection-btn-s">
              <button onclick="start_over()" id="restart-btn" type="button" style="width: 100%; margin-top: 10px" class="btn btn-default">
                <span class="cell-btn">START OVER</span></button>
              <button type="button" style="width: 100%; margin-top: 10px" class="btn btn-sp cell-btn" onclick="load_view_1(product.data); load_viewer();">
                DONE
              </button>
            </div>

          </div>
        </div>

      </div>
    </div>
  </div>

  <div id="modal-content-quick-m" class="modal-content-quick-m" style="overflow: hidden; padding: 0; display: none">
    <i id="quick-view-close-m" style="cursor: pointer; color: #ba97a6; z-index: 9000; float: left; margin: 10px;" class="fa fa-times" aria-hidden="true"></i>
    <div id="general_p_content" class="g-wrapper" style="margin-top: 0; padding-top: 0">
      Would you like to edit the placement of our emblem?

      <button style="min-width: 0; width: 85%; margin: 5px 0 0 0" onclick="load_view_3(product.data)" class="styling_btn btn">EDIT</button>
      <button style="min-width: 0; width: 85%; margin: 5px 0 0 0" onclick="load_view_1(product.data)" class="styling_btn btn">ADD
        TO CART
      </button>
    </div>

  </div>

</div>

<script>

    //reload jcarousel
    (function (window, $, undefined) {
        var plugins = ['jcarousel', 'jcarouselAutoscroll', 'jcarouselControl', 'jcarouselPagination'];
        for (var i = 0; i < plugins.length; i++) {
            var plugin = plugins[i];
            var reload_plugin = 'reload' + plugin.charAt(0).toUpperCase() + plugin.slice(1);
            $.fn[reload_plugin] = (function (plugin) {
                return function () {
                    return this.each(function () {
                        if (!$(this).data(plugin)) {
                            console.log('Element is not an instance of ' + plugin);
                            return false;
                        }
                        var _options = $(this).data(plugin)._options;
                        $(this).data(plugin, {}).off()[plugin](_options);
                    });
                };
            })(plugin);
        }
    })(this, jQuery);

    var default_modal = document.getElementById('modal-content-center').cloneNode(true);
    var view_1 = document.getElementById('view_1').cloneNode(true);
    var view_2 = document.getElementById('view_2').cloneNode(true);
    var view_3 = document.getElementById('view_3').cloneNode(true);

    // Get the modal
    var modal_quick = document.getElementById('quick_view');
    var modal_emblem = document.getElementById('modal-content-quick-m');

    $('#quick_view').on('click', function (e) {
        if (e.target === this)
            close_modal();

    });

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target === modal_quick) {
            product.remove();
            modal_quick.style.display = "none";
            $("body").removeClass("modal-open");
            $('body').css('overflow', 'auto');
            $('body').css('position', 'relative');
        }

        if (event.target === modal) {
            modal.style.display = "none";
        }
    };

    function close_modal() {
        product.remove();
        modal_quick.style.display = "none";
        $("body").removeClass("modal-open");
        $('body').css('overflow', 'auto');
        $('body').css('position', 'relative');
    }

    function close_emblem_modal() {
        modal_emblem.style.display = "none";
    }

    function ModifiedView(product_id, picture_id, color_id) {
        this.product_id = product_id;
        this.picture_id = picture_id;
        this.color_id = color_id;
        this.position_emblem_id = null;
        this.logo_id = null;
        this.x = null;
        this.y = null;
        this.multiplexer = 1;

        this.sendable_info = function () {
            return {
                product_id: this.product_id,
                picture_id: this.picture_id,
                color_id: this.color_id,
                position_emblem_id: this.position_emblem_id,
                logo_id: this.logo_id,
                x: this.x,
                y: this.y,
                multiplexer: this.multiplexer
            }
        };

        this.konva_elements = {
            logo: null,
            emblem: null,
            image: null
        };

        this.remove = function () {
            this.position_emblem_id = null;
            this.logo_id = null;
            this.x = null;
            this.y = null;
            this.multiplexer = 1;
            this.konva_elements = {
                logo: null,
                emblem: null,
                image: null
            };
        }
    }

    var ACTUAL_VIEW = null;
    var ACTUAL_LOGO = null;

    var current_view = 1;

    //MAIN LAYER
    var LAYER = null;

    //MAIN STAGE
    var STAGE = null;
    var stage_scale = 1;
    var limit = 0;

    var GROUP = null;
    var current_pointer = 0;

    // Get the modal
    var modal_quick_m = document.getElementById('modal-content-quick-m');
    var modal_base = document.getElementById('modal-content-center');

    // Get the <span> element that closes the modal
    var span_quick_m = document.getElementById('quick-view-close-m');

    var TEMP_PRESET_HOLDER = null;

    var UPDATABLE_VIEW = {
        id: null,
        view: null,
        parent: null
    };

    var UPDATABLE_EMBLEM = {
        x: null,
        y: null,
        multiplexer: null,
        src: null
    };

    function sendable_views(views) {
        var sendable_views = [];
        for (var t = 0; t < views.length; t++) {
            sendable_views.push(views[t].sendable_info());
        }
        return sendable_views;
    }

    //Main product
    var product = {
        data: null,
        product_id: null,
        color_id: null,
        size_id: null,
        views: [],
        send_info: function () {
            return {
                data: this.data,
                product_id: this.product_id,
                color_id: this.color_id,
                size_id: this.size_id,
                views: sendable_views(this.views)
            }
        },
        remove: function () {
            this.data = null;
            this.product_id = null;
            this.color_id = null;
            this.size_id = null;
            this.views = [];
            current_pointer = 0;
            current_view = 1;
            LAYER = null;
            STAGE = null;
            stage_scale = 1;
            limit = 0;
            GROUP = null;
            ACTUAL_VIEW = null;
            ACTUAL_LOGO = null;
            UPDATABLE_VIEW = {
                id: null,
                view: null,
                parent: null
            };
            UPDATABLE_EMBLEM = {
                x: null,
                y: null,
                multiplexer: null,
                src: null
            };
            TEMP_PRESET_HOLDER = null;
        },
        clean: function () {
            this.views = [];
            current_pointer = 0;
            LAYER = null;
            STAGE = null;
            stage_scale = 1;
            limit = 0;
            GROUP = null;
            ACTUAL_VIEW = null;
            ACTUAL_LOGO = null;
            UPDATABLE_VIEW = {
                id: null,
                view: null,
                parent: null
            };
            UPDATABLE_EMBLEM = {
                x: null,
                y: null,
                multiplexer: null,
                src: null
            };
        }
    };

    function fitStageIntoParentContainer() {
        var container = document.querySelector('#image-container');
        // now we need to fit stage into parent
        var containerWidth = container.offsetWidth;
        var containerHeight = container.offsetHeight;
        var cur = containerHeight;
        if (containerWidth < containerHeight) {
            cur = containerWidth;
        }
        // to do this we need to scale the stage
        limit = limit / stage_scale;
        var scale = cur / 500;
        stage_scale = scale;
        limit = limit * stage_scale;
        STAGE.width(500 * scale);
        STAGE.height(500 * scale);
        STAGE.scale({x: scale, y: scale});
        STAGE.draw();
    }

    // When the user clicks on <span> (x), close the modal
    span_quick_m.onclick = function () {
        remove_modal_m()
    };

    function remove_modal_m() {
        modal_quick_m.style.display = "none";
        modal_base.className = 'modal-content_quick modal-content_base';
    }

    function send_variations() {
        modal_base.className += ' blur';
        modal_quick_m.style.display = "block";
    }

    function open_quick(pr, view) {
        $.ajax({
            type: "get",
            url: "/catalog/item/" + pr,
            data: {},
            success: function (data) {

                console.log(data);
                document.getElementById('modal-content-center').outerHTML = default_modal.outerHTML;

                product.remove();

                product.product_id = data.id;
                product.color_id = data.main_color.id;
                product.data = data;

                load_viewer();
                switch (view) {
                    case 1:
                        load_view_1(data);
                        break;
                    case 2:
                        load_view_2(data);
                        break;
                    case 3:
                        load_view_3(data);
                        break;
                }

                return false
            },
            error: function (data) {
                return false
            }
        });
        var body = $("body");
        body.addClass("modal-open");
        body.css('overflow', 'hidden');
        modal_quick.style.display = "block";
    }

    function load_data_preset(color_id, logo_id, x, y, multiplexer, picture_id) {

        console.log('Hola');
        product.clean();
        product.color_id = color_id;

        TEMP_PRESET_HOLDER = {
            color_id: color_id,
            logo_id: logo_id,
            x: x,
            y: y,
            multiplexer: multiplexer,
            picture_id: picture_id
        };

        load_viewer();
    }

    function create_image_slider(views) {

        current_pointer = 0;
        var p1 = 0;
        var p2 = 0;

        limit = 500 * (views.length - 1) * -1 * stage_scale;

        GROUP = new Konva.Group({
            x: 0,
            y: 0,
            height: 500,
            width: 500 * views.length,
            draggable: true,
            dragBoundFunc: function (pos) {
                return {
                    x: pos.x < 0 && pos.x > limit ? pos.x : this.getAbsolutePosition().x,
                    y: this.getAbsolutePosition().y
                }
            }
        });
        LAYER.add(GROUP);

        GROUP.on('touchstart mousedown', function () {
            p1 = STAGE.getPointerPosition();
        });

        GROUP.on('touchend mouseup', function () {
            p2 = STAGE.getPointerPosition();
            if ((p2.x - p1.x) / stage_scale < -50) {
                var mover = -500 * (current_pointer + 1);
                var once = true;
                var lim = 500 * (views.length - 1) * -1;
                var animation_1 = new Konva.Animation(function (frame) {
                    var x = GROUP.getX();
                    if (x > mover && x > lim) {
                        if (x - (50 * frame.time / 1000) < mover) {
                            GROUP.move({x: mover - x, y: 0});
                            once ? current_pointer = current_pointer + 1 : null;
                            once = false;
                        } else {
                            GROUP.move({x: -50 * frame.time / 1000, y: 0});
                            once ? current_pointer = current_pointer + 1 : null;
                            once = false;
                        }
                    } else {
                        animation_1.stop();
                    }
                }, LAYER);
                animation_1.start();
            } else if ((p2.x - p1.x) / stage_scale > 50) {
                var mover = -500 * (current_pointer - 1);
                var once = true;
                var animation_2 = new Konva.Animation(function (frame) {
                    var x = GROUP.getX();
                    if (x < mover && x < 0) {
                        if (x + (50 * frame.time / 1000) > mover) {
                            GROUP.move({x: mover - x, y: 0});
                            once ? current_pointer = current_pointer - 1 : null;
                            once = false;
                        } else {
                            GROUP.move({x: 50 * frame.time / 1000, y: 0});
                            once ? current_pointer = current_pointer - 1 : null;
                            once = false;
                        }
                    } else {
                        animation_2.stop();
                    }
                }, LAYER);
                animation_2.start();
            } else {
                var mover = -500 * current_pointer;
                var x = GROUP.getX();
                if (x > mover) {
                    var animation_3 = new Konva.Animation(function (frame) {
                        x = GROUP.getX();
                        if (x - (50 * frame.time / 1000) < mover) {
                            GROUP.move({x: mover - x, y: 0});
                            animation_3.stop();
                        } else if (x > mover) {
                            GROUP.move({x: -50 * frame.time / 1000, y: 0});
                        }
                    }, LAYER);
                    animation_3.start();
                } else if (x < mover) {
                    var animation_4 = new Konva.Animation(function (frame) {
                        x = GROUP.getX();
                        if (x + (50 * frame.time / 1000) > mover) {
                            GROUP.move({x: mover - x, y: 0});
                            animation_4.stop();
                        } else if (x < mover) {
                            GROUP.move({x: 50 * frame.time / 1000, y: 0});
                        }
                    }, LAYER);
                    animation_4.start();
                }
            }
        });

        for (var i = 0; i < views.length; i++) {
            add_image_in_position(views[i].src, 'img' + i, 500 * i, GROUP, i);
        }

        LAYER.draw();
    }

    function add_image_in_position(url, id, x, group, i) {

        var view = product.views[i];

        console.log('Primera parte');

        if (TEMP_PRESET_HOLDER !== null) {
            console.log(view.picture_id);
            console.log(TEMP_PRESET_HOLDER.picture_id);

            if (view.picture_id === parseInt(TEMP_PRESET_HOLDER.picture_id)) {
                current_pointer = i;
                view.logo_id = TEMP_PRESET_HOLDER.logo_id;
                view.x = parseFloat(TEMP_PRESET_HOLDER.x);
                view.y = parseFloat(TEMP_PRESET_HOLDER.y);
                view.multiplexer = parseFloat(TEMP_PRESET_HOLDER.multiplexer);
            }
        }

        var img_grp = new Konva.Group({
            x: x,
            y: 0,
            width: 500,
            height: 500,
            draggable: false,
            name: 'grp' + i
        });
        group.add(img_grp);

        var img = new Konva.Image({
            x: 0,
            y: 0,
            width: 500,
            height: 500,
            draggable: false,
            name: id
        });
        img_grp.add(img);
        view.konva_elements.image = img;

        var image = new Image();
        image.onload = function () {
            img.image(image);
            LAYER.draw();
        };
        image.src = url;

        if (view.logo_id) {
            console.log('has logo');
            var logo = new Konva.Image({
                x: view.x,
                y: view.y,
                draggable: false,
                dragBoundFunc: function (pos) {
                    return {
                        x: pos.x > 0 ? pos.x : this.getAbsolutePosition().x,
                        y: pos.y > 0 ? pos.y : this.getAbsolutePosition().y
                    }
                }
            });
            group.add(logo);
            view.konva_elements.logo = logo;

            logo.on('dragend', function () {
                view.x = logo.x();
                view.y = logo.y();
            });

            var imageLogo = new Image();
            imageLogo.onload = function () {
                logo.image(imageLogo);
                logo.setWidth(this.width);
                logo.setHeight(this.height);
                logo.scale({
                    x: view.multiplexer,
                    y: view.multiplexer
                });
                LAYER.draw()
            };

            $.ajax({
                url: '/catalog/product/logo?logo_id=' + view.logo_id,
                type: 'GET',
                dataType: 'text',
                data: {},
                success: function (data) {
                    imageLogo.src = data
                },
                error: function (data) {
                    console.log(data);
                }
            });
        }

        if (view.position_emblem_id) {
            var emblem = new Konva.Image({
                x: 0,
                y: 0
            });
            LAYER.add(emblem);
            view.konva_elements.emblem = emblem;

            var imageEmblem = new Image();
            imageEmblem.onload = function () {
                emblem.image(imageEmblem);
                emblem.setWidth(this.width);
                emblem.setHeight(this.height);
                LAYER.draw();
            };

            $.ajax({
                url: '/catalog/product/emblem?emblem_id=' + view.position_emblem_id,
                type: 'GET',
                dataType: 'json',
                data: {},
                success: function (data) {
                    emblem.setX(data.x);
                    emblem.setY(data.y);
                    emblem.scale({
                        x: data.multiplexer,
                        y: data.multiplexer
                    });
                },
                error: function (data) {
                    console.log(data);
                }
            });
        }
    }

    function create_objects_array(data) {
        for (var i = 0; i < data.length; i++) {
            product.views.push(new ModifiedView(product.data['id'], data[i]['id'], data[i]['color_id']))
        }
        console.log(product);
    }

    function update_section() {

        var group = UPDATABLE_VIEW.parent;
        var view = UPDATABLE_VIEW.view;

        if (view.logo_id && current_view === 2) {

            var logo = new Konva.Image({
                x: view.x,
                y: view.y,
                draggable: true,
                dragBoundFunc: function (pos) {
                    return {
                        x: pos.x > 0 ? pos.x : this.getAbsolutePosition().x,
                        y: pos.y > 0 ? pos.y : this.getAbsolutePosition().y
                    }
                }
            });
            console.log(group);
            group.add(logo);
            view.konva_elements.logo = logo;

            logo.on('dragmove', function () {
                view.x = logo.x();
                view.y = logo.y();
            });

            var imageLogo = new Image();
            imageLogo.onload = function () {

                view.multiplexer = 150 / this.width;

                logo.image(imageLogo);
                logo.setWidth(this.width);
                logo.setHeight(this.height);
                logo.scale({
                    x: view.multiplexer,
                    y: view.multiplexer
                });

                view.x = 250 - logo.getClientRect().width / 2;
                view.y = 250 - logo.getClientRect().height / 2;

                logo.setX(view.x);
                logo.setY(view.y);

                LAYER.draw()
            };

            $.ajax({
                url: '/catalog/product/logo?logo_id=' + view.logo_id,
                type: 'GET',
                dataType: 'text',
                data: {},
                success: function (data) {
                    imageLogo.src = data
                },
                error: function (data) {
                    console.log(data);
                }
            });
        }

        if (view.position_emblem_id && current_view === 3) {
            view.konva_elements.emblem ? view.konva_elements.emblem.destroy() : null;

            var emblem = new Konva.Image({
                x: UPDATABLE_EMBLEM.x,
                y: UPDATABLE_EMBLEM.y
            });
            group.add(emblem);
            view.konva_elements.emblem = emblem;

            var imageEmblem = new Image();
            imageEmblem.onload = function () {
                emblem.image(imageEmblem);
                emblem.setWidth(this.width);
                emblem.setHeight(this.height);
                emblem.scale({
                    x: UPDATABLE_EMBLEM.multiplexer,
                    y: UPDATABLE_EMBLEM.multiplexer
                });
                LAYER.draw();
            };

            imageEmblem.src = UPDATABLE_EMBLEM.src;
        }
    }

    function load_viewer(_url_base, view, view_stationary) {
        _url_base = _url_base || null;

        if (view !== undefined && view !== null) {
            UPDATABLE_VIEW.id = view;
            UPDATABLE_VIEW.view = product.views[view];
            UPDATABLE_VIEW.parent = product.views[view].konva_elements.image.getParent();

            update_section();
        } else {
            if (_url_base === 'null') {
                _url_base = null;
            }

            var stageWidth = 500;
            var stageHeight = 500;

            STAGE = new Konva.Stage({
                container: 'image-container',
                width: stageWidth,
                height: stageHeight
            });
            LAYER = new Konva.Layer();
            STAGE.add(LAYER);

            $('#slide-right').on('click', function () {
                var mover = -500 * (current_pointer + 1);
                var once = true;
                var lim = 500 * (product.views.length - 1) * -1;
                var animation_1 = new Konva.Animation(function (frame) {
                    var x = GROUP.getX();
                    if (x > mover && x > lim) {
                        if (x - (50 * frame.time / 1000) < mover) {
                            GROUP.move({x: mover - x, y: 0});
                            once ? current_pointer = current_pointer + 1 : null;
                            once = false;
                        } else {
                            GROUP.move({x: -50 * frame.time / 1000, y: 0});
                            once ? current_pointer = current_pointer + 1 : null;
                            once = false;
                        }
                    } else {
                        animation_1.stop();
                    }
                }, LAYER);
                animation_1.start();
            });

            $('#slide-left').on('click', function () {
                var mover = -500 * (current_pointer - 1);
                var once = true;
                var animation_2 = new Konva.Animation(function (frame) {
                    var x = GROUP.getX();
                    if (x < mover && x < 0) {
                        if (x + (50 * frame.time / 1000) > mover) {
                            GROUP.move({x: mover - x, y: 0});
                        } else {
                            console.log(50);
                            GROUP.move({x: 50 * frame.time / 1000, y: 0});
                        }
                        once ? current_pointer = current_pointer - 1 : null;
                        once = false;
                    } else {
                        animation_2.stop();
                    }
                }, LAYER);
                animation_2.start();
            });

            $.ajax({
                url: '/catalog/product/color/images',
                type: 'GET',
                dataType: 'json',
                data: {
                    color_id: product.color_id
                },
                success: function (data) {
                    console.log(data);
                    if (product.views.length === 0) {
                        create_objects_array(data);
                    }
                    create_image_slider(data);
                    if (view_stationary && GROUP) {
                        GROUP.draggable(false);
                        GROUP.off('touchstart');
                        GROUP.off('mousedown');
                        GROUP.off('touchend');
                        GROUP.off('mouseup');
                    }
                },
                error: function (data) {
                    console.log(data);
                }
            });

            fitStageIntoParentContainer();
            window.addEventListener('resize', fitStageIntoParentContainer);
            $('#image-container .konvajs-content').removeStyle("position");
        }
    }

    function load_view_3(product_, clicked) {

        current_view = 3;
        clicked = clicked || false;

        $("#slide-left").prop("disabled", true);
        $("#slide-right").prop("disabled", true);

        var actor = document.getElementById('actor');
        var new_element = actor.cloneNode(true);
        new_element.addEventListener("click", function () {
            load_view_1(product_);
        });
        new_element.innerHTML = '<i class="fa fa-chevron-left" aria-hidden="true"></i>';
        actor.parentNode.replaceChild(new_element, actor);

        document.getElementById('view_3').outerHTML = view_3.outerHTML;

        document.getElementById('view_1').style.display = 'none';
        document.getElementById('view_2').style.display = 'none';
        document.getElementById('view_3').style.display = 'block';
        close_emblem_modal();

        if (GROUP) {
            GROUP.draggable(false);
            GROUP.off('touchstart');
            GROUP.off('mousedown');
            GROUP.off('touchend');
            GROUP.off('mouseup');
        }

        for (var i = 0; i < product.views.length; i++) {
            var temp_view = product.views[i].konva_elements.logo;
            if (temp_view) {
                temp_view.draggable(false);
            }
        }

        $.ajax({
            url: '/catalog/product/emblems?product_id=' + product.product_id + '&color_id=' + product.color_id,
            type: 'GET',
            dataType: 'json',
            data: {},
            success: function (data) {
                console.log(data);

                var carousel_jq = $('ul#container-emblems');


                for (var i = 0; i < data.length; i++) {

                    var selected = '';
                    if (product.emblem_id === data[i].id) {
                        selected = 'selected_emblem';
                        if (!clicked) {
                            load_viewer(data[i].sample);
                        }
                    }

                    console.log(data[i]);

                    carousel_jq.append('<li>' +
                        '<div id="emblem_btn_' + data[i].id + '" class="' + selected + '" onclick="load_data_emblems(' + data[i].id + ', ' + data[i].product_image_id + ')" style="cursor: pointer; margin: 4px; width: 100px; text-align: center">' +
                        '<div style=" background: #f1f1f1; padding-bottom: 10px;">' +
                        '<img style="margin: 5px;" height="50px" src="' + data[i].url + '">' +
                        '<div><h5 style="width: 100%; font-weight: bold;">' + data[i].title + '</h5></div>' +
                        '</div>' +
                        '<div><h5 style="width: 100%; color: #c2a5b2">+$' + data[i].price + '</h5></div>' +
                        '</div>' +
                        '</li>');
                }

                var jcarouselSelector = '.jcarousel';

                $(jcarouselSelector).reloadJcarousel();

                $('.jcarousel-control-prev').jcarouselControl({
                    // Options go here
                    target: '-=1'
                });
                $('.jcarousel-control-next').jcarouselControl({
                    // Options go here
                    target: '+=1'
                });
                $('div#preview_size_cr_carousel').jcarousel('reload');
            },
            error: function (data) {

            }
        });

        var iconShow = $("#icon-show-logos");
        var iconHide = $("#icon-hide-logos");
        var loader = $("#icon_loader-logos");

        iconShow.click(function () {
            loader.animate({
                height: 70
            }, 100, function () {
                loader.css({
                    overflow: 'visible'
                });
            });
            iconShow.addClass(" hidden");
            iconHide.removeClass(" hidden");
        });

        iconHide.click(function () {
            loader.animate({
                height: 0
            }, 100, function () {
                loader.css({
                    overflow: 'hidden'
                });
            });
            iconHide.addClass(" hidden");
            iconShow.removeClass(" hidden");
        });

        $('#quick_view, #general_p_content').animate({scrollTop: '0px'}, 500);
    }

    function load_view_2(product_) {
        current_view = 2;

        $("#slide-left").prop("disabled", true);
        $("#slide-right").prop("disabled", true);

        ACTUAL_VIEW = product.views[current_pointer];
        ACTUAL_LOGO = ACTUAL_VIEW.konva_elements.logo;

        document.getElementById('view_2').outerHTML = view_2.outerHTML;

        document.getElementById('view_1').style.display = 'none';
        document.getElementById('view_3').style.display = 'none';
        document.getElementById('view_2').style.display = 'block';

        var actor = document.getElementById('actor');
        var new_element = actor.cloneNode(true);
        new_element.addEventListener("click", function () {
            load_view_1(product_)
        });
        new_element.innerHTML = '<i class="fa fa-chevron-left" aria-hidden="true"></i>';
        actor.parentNode.replaceChild(new_element, actor);

        load_colors(product_.id);

        if (GROUP) {
            GROUP.draggable(false);
            GROUP.off('touchstart');
            GROUP.off('mousedown');
            GROUP.off('touchend');
            GROUP.off('mouseup');
        }

        for (var i = 0; i < product.views.length; i++) {
            var temp_view = product.views[i].konva_elements.logo;
            if (temp_view) {
                temp_view.draggable(true);
            }
        }

        $.ajax({
            url: '/catalog/product/logos?product_id=' + product.product_id,
            type: 'GET',
            dataType: 'json',
            data: {},
            success: function (data) {
                console.log(data);

                var carousel_jq = $('ul#container-logos');

                for (var i = 0; i < data.length; i++) {
                    carousel_jq.append('<li><img src="' + data[i].picture + '" style="height: 70px;" id="' + data[i].id + '" onclick="load_data_logos(\'' + data[i].id + '\', ' + current_pointer + ')"></li>');
                }

                var jcarouselSelector = '.jcarousel';

                $(jcarouselSelector).reloadJcarousel();

                $('.jcarousel-control-prev').jcarouselControl({
                    // Options go here
                    target: '-=1'
                });
                $('.jcarousel-control-next').jcarouselControl({
                    // Options go here
                    target: '+=1'
                });
                $('div#preview_size_cr_carousel').jcarousel('reload');
            },
            error: function (data) {

            }
        });

        var iconShow = $("#icon-show-logos");
        var iconHide = $("#icon-hide-logos");
        var loader = $("#icon_loader-logos");

        iconShow.click(function () {
            loader.animate({
                height: 70
            }, 100, function () {
                loader.css({
                    overflow: 'visible'
                });
            });
            iconShow.addClass(" hidden");
            iconHide.removeClass(" hidden");
        });

        iconHide.click(function () {
            loader.animate({
                height: 0
            }, 100, function () {
                loader.css({
                    overflow: 'hidden'
                });
            });
            iconHide.addClass(" hidden");
            iconShow.removeClass(" hidden");
        });

        var anim_zoom_in = new Konva.Animation(function (frame) {

            console.log(ACTUAL_LOGO);
            console.log(ACTUAL_VIEW);
            if (ACTUAL_LOGO !== null) {
                ACTUAL_LOGO.scale({
                    x: ACTUAL_VIEW.multiplexer + 0.0005 * frame.timeDiff,
                    y: ACTUAL_VIEW.multiplexer + 0.0005 * frame.timeDiff
                });
                LAYER.draw();

                ACTUAL_VIEW.multiplexer = ACTUAL_VIEW.multiplexer + 0.0005 * frame.timeDiff;
            }
        }, LAYER);

        var anim_zoom_out = new Konva.Animation(function (frame) {
            if (ACTUAL_LOGO !== null) {

                ACTUAL_LOGO.scale({
                    x: ACTUAL_VIEW.multiplexer - 0.0005 * frame.timeDiff,
                    y: ACTUAL_VIEW.multiplexer - 0.0005 * frame.timeDiff
                });
                LAYER.draw();

                ACTUAL_VIEW.multiplexer = ACTUAL_VIEW.multiplexer - 0.0005 * frame.timeDiff;
            }
        }, LAYER);

        var anim_right = new Konva.Animation(function (frame) {
            if (ACTUAL_LOGO !== null && (ACTUAL_VIEW.x + ACTUAL_LOGO.getClientRect().width) < 500) {
                ACTUAL_LOGO.x(ACTUAL_LOGO.x() + (105 * frame.timeDiff / 1000));
                LAYER.draw();

                ACTUAL_VIEW.x = ACTUAL_LOGO.x();
                ACTUAL_VIEW.y = ACTUAL_LOGO.y();
            }
        }, LAYER);

        var anim_left = new Konva.Animation(function (frame) {
            if (ACTUAL_LOGO !== null && ACTUAL_VIEW.x > 0) {
                ACTUAL_LOGO.x(ACTUAL_LOGO.x() - (105 * frame.timeDiff / 1000));
                LAYER.draw();

                ACTUAL_VIEW.x = ACTUAL_LOGO.x();
                ACTUAL_VIEW.y = ACTUAL_LOGO.y();
            }
        }, LAYER);

        var anim_up = new Konva.Animation(function (frame) {
            if (ACTUAL_LOGO !== null && ACTUAL_VIEW.y > 0) {
                ACTUAL_LOGO.y(ACTUAL_LOGO.y() - (105 * frame.timeDiff / 1000));
                LAYER.draw();

                ACTUAL_VIEW.x = ACTUAL_LOGO.x();
                ACTUAL_VIEW.y = ACTUAL_LOGO.y();
            }
        }, LAYER);

        var anim_down = new Konva.Animation(function (frame) {
            if (ACTUAL_LOGO !== null && (ACTUAL_VIEW.y + ACTUAL_LOGO.getClientRect().height) < 500) {
                ACTUAL_LOGO.y(ACTUAL_LOGO.y() + (105 * frame.timeDiff / 1000));
                LAYER.draw();

                ACTUAL_VIEW.x = ACTUAL_LOGO.x();
                ACTUAL_VIEW.y = ACTUAL_LOGO.y();
            }
        }, LAYER);

        var btn_up = $("#up-btn");
        var btn_down = $("#down-btn");
        var btn_left = $("#left-btn");
        var btn_right = $("#right-btn");
        var btn_minus = $("#minus-btn");
        var btn_plus = $("#plus-btn");
        var btn_restart = $("#restart-btn");

        btn_minus.on('mousedown touchstart', function () {
            anim_zoom_out.start();
        });

        btn_minus.on('mouseup touchend', function () {
            anim_zoom_out.stop();
        });

        btn_plus.on('mousedown touchstart', function () {
            anim_zoom_in.start();
        });

        btn_plus.on('mouseup touchend', function () {
            anim_zoom_in.stop();
        });

        btn_up.on('mousedown touchstart', function () {
            anim_up.start();
        });

        btn_up.on('mouseup touchend', function () {
            anim_up.stop();
        });

        btn_down.on('mousedown touchstart', function () {
            anim_down.start();
        });

        btn_down.on('mouseup touchend', function () {
            anim_down.stop();
        });

        btn_left.on('mousedown touchstart', function () {
            anim_left.start();
        });

        btn_left.on('mouseup touchend', function () {
            anim_left.stop();
        });

        btn_right.on('mousedown touchstart', function () {
            anim_right.start();
        });

        btn_right.on('mouseup touchend', function () {
            anim_right.stop();
        });

        $('#quick_view, #general_p_content').animate({scrollTop: '0px'}, 500);

    }

    function change_source(id) {
        product.clean();
        product.color_id = id;
        load_viewer(null, null, true);
        load_colors(product.product_id);
    }

    function load_colors(id) {
        $.ajax({
            url: '/catalog/product/colors?product_id=' + id,
            method: 'get',
            dataType: 'json',
            success: function (data) {

                var div_color_container = $('div#checkboxes-color');
                div_color_container.html('');

                for (var i = 0; i < data.length; i++) {
                    if (data[i].id.toString() === product.color_id.toString()) {
                        div_color_container.append('<div onclick="change_source(\'' + data[i].id + '\')" style="background: ' + data[i].code_hex + '; width: 17px; height: 17px; margin-right: 5px; margin-bottom: 7px; float: left; cursor: pointer">' +
                            '<div id="color-picker" class="">' +
                            '<i style="color: white" class="fa fa-check-circle-o" aria-hidden="true"></i>' +
                            '</div>' +
                            '</div>');
                    } else {
                        div_color_container.append('<div onclick="change_source(\'' + data[i].id + '\')" style="background: ' + data[i].code_hex + '; width: 17px; height: 17px; margin-right: 5px; margin-bottom: 7px; float: left; cursor: pointer">' +
                            '<div id="color-picker" class="">' +

                            '</div>' +
                            '</div>');
                    }
                }
            },
            error: function () {

            }
        });
    }

    function load_data_logos(logo_id, view) {
        ACTUAL_VIEW = product.views[view];
        if (ACTUAL_VIEW.konva_elements.logo) {
            ACTUAL_VIEW.konva_elements.logo.destroy();
            LAYER.draw();
        }
        product.views[view].logo_id = logo_id;
        load_viewer(null, view);
        ACTUAL_LOGO = ACTUAL_VIEW.konva_elements.logo;
    }

    function get_view_by_image(id) {
        for (var r = 0; r < product.views.length; r++) {
            console.log(product.views[r]);
            if (product.views[r].picture_id === parseInt(id)) {
                return {id: r, view: product.views[r]}
            }
        }
    }

    function load_data_emblems(emblem_id, product_picture_id) {

        $.ajax({
            url: '/catalog/product/emblem?emblem_id=' + emblem_id,
            type: 'GET',
            dataType: 'json',
            data: {},
            success: function (data) {
                UPDATABLE_EMBLEM = {
                    x: data.x,
                    y: data.y,
                    multiplexer: data.multiplexer,
                    src: data.src
                };

                var view = get_view_by_image(data.product_image_id);

                if (view.view.position_emblem_id === emblem_id) {

                    $('#emblem_btn_' + emblem_id).removeClass('selected_emblem');

                    view.view.position_emblem_id = null;
                    view.view.konva_elements.emblem ? view.view.konva_elements.emblem.destroy() : null;
                    LAYER.draw();

                    if (view.id > current_pointer) {
                        current_pointer = view.id;
                        var mover = -500 * current_pointer;
                        var animation_1 = new Konva.Animation(function (frame) {
                            var x = GROUP.getX();
                            if (x > mover) {
                                if (x - (50 * frame.time / 1000) < mover) {
                                    GROUP.move({x: mover - x, y: 0});
                                    animation_1.stop();
                                } else {
                                    GROUP.move({x: -50 * frame.time / 1000, y: 0});
                                }
                            }
                        }, LAYER);
                        animation_1.start();
                    } else if (view.id < current_view) {
                        current_pointer = view.id;
                        var mover = -500 * (current_pointer);
                        var animation_2 = new Konva.Animation(function (frame) {
                            var x = GROUP.getX();
                            if (x < mover && x < 0) {
                                if (x + (50 * frame.time / 1000) > mover) {
                                    GROUP.move({x: mover - x, y: 0});
                                    animation_2.stop();
                                } else {
                                    GROUP.move({x: 50 * frame.time / 1000, y: 0});
                                }
                            }
                        }, LAYER);
                        animation_2.start();
                    }

                } else {

                    $('#emblem_btn_' + emblem_id).addClass('selected_emblem');

                    view.view.position_emblem_id = emblem_id;
                    load_viewer(null, view.id);

                    if (view.id > current_pointer) {
                        current_pointer = view.id;
                        var mover = -500 * current_pointer;
                        var animation_1 = new Konva.Animation(function (frame) {
                            var x = GROUP.getX();
                            if (x > mover) {
                                if (x - (50 * frame.time / 1000) < mover) {
                                    GROUP.move({x: mover - x, y: 0});
                                    animation_1.stop();
                                } else {
                                    GROUP.move({x: -50 * frame.time / 1000, y: 0});
                                }
                            }
                        }, LAYER);
                        animation_1.start();
                    } else if (view.id < current_view) {
                        current_pointer = view.id;
                        var mover = -500 * (current_pointer);
                        var animation_2 = new Konva.Animation(function (frame) {
                            var x = GROUP.getX();
                            if (x < mover && x < 0) {
                                if (x + (50 * frame.time / 1000) > mover) {
                                    GROUP.move({x: mover - x, y: 0});
                                    animation_2.stop();
                                } else {
                                    GROUP.move({x: 50 * frame.time / 1000, y: 0});
                                }
                            }
                        }, LAYER);
                        animation_2.start();
                    }
                }
            },
            error: function (data) {
                console.log(data);
            }
        });
    }

    function start_over() {
        product.logo_id = null;
        product.multiplexer = 1;
        product.logo_x = null;
        product.logo_y = null;
        load_viewer();
    }

    function load_view_1(_product) {

        current_view = 1;
        document.getElementById('view_1').outerHTML = view_1.outerHTML;

        var actor = document.getElementById('actor');
        var new_element = actor.cloneNode(true);
        new_element.addEventListener("click", function () {
            close_modal()
        });
        new_element.innerHTML = '<i class="fa fa-times" aria-hidden="true"></i>';
        actor.parentNode.replaceChild(new_element, actor);

        document.getElementById('view_1').style.display = 'block';
        document.getElementById('view_2').style.display = 'none';
        document.getElementById('view_3').style.display = 'none';
        close_emblem_modal();

        document.getElementById('product_title').innerHTML = _product.title;
        document.getElementById('product_price').innerHTML = '$' + _product.price;
        var description = document.getElementById('product_description').getElementsByTagName('span');
        description[0].innerHTML = _product.description.substr(0, 30);
        description[2].innerHTML = _product.description.substr(30);

        $("#slide-left").prop("disabled", false);
        $("#slide-right").prop("disabled", false);

        if (GROUP) {
            GROUP.draggable(true);

            GROUP.dragBoundFunc(function (pos) {
                return {
                    x: pos.x < 0 && pos.x > limit ? pos.x : this.getAbsolutePosition().x,
                    y: this.getAbsolutePosition().y
                }
            });

            var p1 = 0;
            var p2 = 0;

            GROUP.on('touchstart mousedown', function () {
                p1 = STAGE.getPointerPosition();
            });

            GROUP.on('touchend mouseup', function () {
                p2 = STAGE.getPointerPosition();
                if ((p2.x - p1.x) / stage_scale < -50) {
                    var mover = -500 * (current_pointer + 1);
                    var once = true;
                    var lim = 500 * (product.views.length - 1) * -1;
                    var animation_1 = new Konva.Animation(function (frame) {
                        var x = GROUP.getX();
                        if (x > mover && x > lim) {
                            if (x - (50 * frame.time / 1000) < mover) {
                                GROUP.move({x: mover - x, y: 0});
                            } else {
                                GROUP.move({x: -50 * frame.time / 1000, y: 0});
                            }
                            once ? current_pointer = current_pointer + 1 : null;
                            once = false;
                        } else {
                            animation_1.stop();
                        }
                    }, LAYER);
                    animation_1.start();
                } else if ((p2.x - p1.x) / stage_scale > 50) {
                    var mover = -500 * (current_pointer - 1);
                    var once = true;
                    var animation_2 = new Konva.Animation(function (frame) {
                        var x = GROUP.getX();
                        if (x < mover && x < 0) {
                            if (x + (50 * frame.time / 1000) > mover) {
                                GROUP.move({x: mover - x, y: 0});
                            } else {
                                console.log(50);
                                GROUP.move({x: 50 * frame.time / 1000, y: 0});
                            }
                            once ? current_pointer = current_pointer - 1 : null;
                            once = false;
                        } else {
                            animation_2.stop();
                        }
                    }, LAYER);
                    animation_2.start();
                } else {
                    var mover = -500 * current_pointer;
                    var x = GROUP.getX();
                    if (x > mover) {
                        var animation_3 = new Konva.Animation(function (frame) {
                            x = GROUP.getX();
                            if (x - (50 * frame.time / 1000) < mover) {
                                GROUP.move({x: mover - x, y: 0});
                                animation_3.stop();
                            } else if (x > mover) {
                                GROUP.move({x: -50 * frame.time / 1000, y: 0});
                            }
                        }, LAYER);
                        animation_3.start();
                    } else if (x < mover) {
                        var animation_4 = new Konva.Animation(function (frame) {
                            x = GROUP.getX();
                            if (x + (50 * frame.time / 1000) > mover) {
                                GROUP.move({x: mover - x, y: 0});
                                animation_4.stop();
                            } else if (x < mover) {
                                GROUP.move({x: 50 * frame.time / 1000, y: 0});
                            }
                        }, LAYER);
                        animation_4.start();
                    }
                }
            });
        }

        for (var i = 0; i < product.views.length; i++) {
            var temp_view = product.views[i].konva_elements.logo;
            if (temp_view) {
                temp_view.draggable(false);
            }
        }

        //More text for description toggle
        var state = true;
        $("#more-toggle").on('click', function () {
            if (state) {
                $(this).text("Read less");
                $(".complete").show();
                $("#dots").hide();
            } else {
                $(this).text("Read more");
                $(".complete").hide();
                $("#dots").show();
            }
            state = !state;
        });

        $.ajax({
            url: '/catalog/product/sizes?product_id=' + _product.id,
            type: 'GET',
            dataType: 'json',
            data: {},
            success: function (data) {
                console.log(data);

                var carousel_jq = $('ul#container-sizes');

                for (var i = 0; i < data.length; i++) {
                    carousel_jq.append('<li><span style="font-size: 15px" id="' + data[i].id + '" onclick="changeSize(\'' + data[i].id + '\')" class="badge badge-size text_light">' + data[i].title + '</span></li>');
                }

                var jcarouselSelector = '.jcarousel';

                $(jcarouselSelector).reloadJcarousel();

                $('.jcarousel-control-prev').jcarouselControl({
                    // Options go here
                    target: '-=1'
                });
                $('.jcarousel-control-next').jcarouselControl({
                    // Options go here
                    target: '+=1'
                });
                $('div#preview_size_cr_carousel').jcarousel('reload');
            },
            error: function (data) {

            }
        });

        $.ajax({
            url: '/catalog/product/presets?product_id=' + _product.id,
            type: 'GET',
            dataType: 'json',
            data: {},
            success: function (data) {
                console.log(data);

                var carousel_jq = $('ul#container-presets');

                for (var i = 0; i < data.length; i++) {
                    console.log('d');
                    carousel_jq.append('<li><div onclick="load_data_preset(\'' + data[i].color_id + '\', \'' + data[i].logo_id + '\', \'' + data[i].x + '\', \'' + data[i].y + '\', \'' + data[i].multiplexer + '\', \'' + data[i].picture_id + '\');" style="width: 70px; height: 70px" id="div_preview_' + data[i].id + '"></div></li>');
                    if (data[i].id === id_preset_temp) {
                        load_data_preset(data[i].color_id, data[i].logo_id, data[i].x, data[i].y, data[i].multiplexer, data[i].picture_id);
                        id_preset_temp = null;
                    }
                }

                for (var t = 0; t < data.length; t++) {
                    create_preview(data[t]);
                }

                var jcarouselSelector = '.jcarousel';

                $(jcarouselSelector).reloadJcarousel();

                $('.jcarousel-control-prev').jcarouselControl({
                    // Options go here
                    target: '-=1'
                });
                $('.jcarousel-control-next').jcarouselControl({
                    // Options go here
                    target: '+=1'
                });
                $('div#preview_preset_cr_carousel').jcarousel('reload');
            },
            error: function (data) {

            }
        });

        function create_preview(preview) {
            var selector = 'div_preview_' + preview.id;
            var container = document.getElementById(selector);

            var stage = new Konva.Stage({
                container: selector,
                width: 70,
                height: 70,
                preventDefault: false
            });

            var layer = new Konva.Layer();
            layer.preventDefault(false);
            stage.add(layer);

            var baseImg = new Konva.Image({
                x: 0,
                y: 0,
                width: 70,
                height: 70,
                preventDefault: false
            });
            layer.add(baseImg);

            var logoImg = new Konva.Image({
                x: (70 * preview.x) / 500,
                y: (70 * preview.y) / 500,
                preventDefault: false
            });
            layer.add(logoImg);

            var imageBase = new Image();
            imageBase.onload = function () {
                baseImg.image(imageBase);
                layer.draw();
            };

            var imageLogo = new Image();
            imageLogo.onload = function () {
                logoImg.image(imageLogo);
                logoImg.setWidth(this.width);
                logoImg.setHeight(this.height);
                logoImg.scale({
                    x: (70 * preview.multiplexer) / 500,
                    y: (70 * preview.multiplexer) / 500
                });
                layer.draw()
            };

            $.ajax({
                url: '/catalog/product/color/main_image?color_id=' + preview.color_id,
                type: 'GET',
                dataType: 'json',
                data: {},
                success: function (data) {
                    imageBase.src = data.picture
                },
                error: function (data) {
                    console.log(data);
                }
            });

            $.ajax({
                url: '/catalog/product/logo?logo_id=' + preview.logo_id,
                type: 'GET',
                dataType: 'text',
                data: {},
                success: function (data) {
                    imageLogo.src = data
                },
                error: function (data) {
                    console.log(data);
                }
            });
        }

        var iconShow = $("#icon-show");
        var iconHide = $("#icon-hide");
        var loader = $("#icon_loader");

        iconShow.click(function () {
            loader.animate({
                height: 40
            }, 100, function () {
                loader.css({
                    overflow: 'visible'
                });
            });
            iconShow.addClass(" hidden");
            iconHide.removeClass(" hidden");
        });

        iconHide.click(function () {
            loader.animate({
                height: 0
            }, 100, function () {
                loader.css({
                    overflow: 'hidden'
                });
            });
            iconHide.addClass(" hidden");
            iconShow.removeClass(" hidden");
        });

        var logoShow = $("#icon-show-logo");
        var logoHide = $("#icon-hide-logo");
        var loader_logo = $("#icon_loader_logo");

        logoShow.click(function () {
            loader_logo.animate({
                height: 80
            }, 200, function () {
                loader_logo.css({
                    overflow: 'visible'
                });
            });
            logoShow.addClass(" hidden");
            logoHide.removeClass(" hidden");
        });

        logoHide.click(function () {
            loader_logo.animate({
                height: 0
            }, 200, function () {
                loader_logo.css({
                    overflow: 'hidden'
                });
            });
            logoHide.addClass(" hidden");
            logoShow.removeClass(" hidden");
        });
    }

    function addToCart() {

        if (product.size_id !== null) {

            $.ajax({
                type: "POST",
                url: "/add_cart",
                data: {
                    product: product.send_info()
                },
                success: function (data, status, xhr) {
                    modal_quick.style.display = "none";
                    $("body").removeClass("modal-open");
                    $('body').css('overflow', 'auto');
                    $('body').css('position', 'relative');
                    location.reload();
                },
                dataType: 'json'
            });
        } else {
            alert('Select a size');
        }
    }

    function changeSize(id) {

        var spans = document.getElementById('container-sizes').getElementsByTagName('span');
        product.size_id = id;

        for (var i = 0; i < spans.length; i++) {
            console.log(spans[i].id);
            console.log(id);
            if (spans[i].id === id) {
                $(spans[i]).addClass('badge_selected');
            } else {
                $(spans[i]).removeClass('badge_selected');
            }
        }
    }

    //Auto//
    var item_s = '<%= params['id'] %>';
    var item_v = '<%= params['view'] %>';
    id_preset_temp = <%= params['preset_id'] || -1 %>;
    if (item_s !== '') {
        if (item_v === '2') {
            open_quick(item_s, 2);
        } else {
            open_quick(item_s, 1);
        }
    }

</script>